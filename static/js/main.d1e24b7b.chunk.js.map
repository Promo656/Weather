{"version":3,"sources":["UI/AdditionalInformation/AdditionalInformation.module.scss","App.module.scss","UI/Header/Header.module.scss","UI/AllDegreePerHour/AllDegreePerHour.module.scss","UI/AllDegreePerHour/SingleDegree/SingleDegree.module.scss","UI/AllDegreePerWeek/DegreePerDay/DegreePerDay.module.scss","UI/AllDegreePerWeek/AllDegreePerWeek.module.scss","UI/Header/Header.tsx","UI/Header/HeaderContainer.tsx","DAL/API/api.ts","BLL/Redux/WeatherReducer.tsx","BLL/Redux/AppReducer.tsx","UI/AdditionalInformation/AdditionalInformation.tsx","UI/AdditionalInformation/AdditionalInformationContainer.tsx","UI/AllDegreePerHour/SingleDegree/SingleDegree.tsx","UI/AllDegreePerHour/AllDegreePerHour.tsx","UI/AllDegreePerHour/AllDegreePerHourContainer.tsx","UI/AllDegreePerWeek/DegreePerDay/DegreePerDay.tsx","UI/AllDegreePerWeek/AllDegreePerWeek.tsx","UI/AllDegreePerWeek/AllDegreePerWeekContainer.tsx","App.tsx","serviceWorker.ts","BLL/Redux/redux-store.tsx","index.tsx"],"names":["module","exports","Header","props","className","s","wrap","name","description","temp","src","icon","alt","HeaderContainer","Paper","style","margin","this","React","Component","connect","state","weather","timezone","current","map","el","userAPI","axios","get","then","response","data","initialStateAll","initialState","initialized","AdditionalInformation","blockWrap","singleBlock","sunrise","speed","pressure","sunset","feels_like","humidity","AdditionalInformationContainer","wind_speed","SingleDegree","singleDegree","hourly","dt","AllDegreePerHour","AllDegreePerHourContainer","DegreePerDay","daily","day","AllDegreePerWeek","AllDegreePerWeekContainer","App","SetInitializedTC","app","compose","dispatch","a","type","payload","Boolean","window","location","hostname","match","reducers","combineReducers","action","lat","lon","timezone_offset","minutely","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1e24b7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"AdditionalInformation_wrap__csCfM\",\"blockWrap\":\"AdditionalInformation_blockWrap__2qnZQ\",\"singleBlock\":\"AdditionalInformation_singleBlock__mwxZW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__14B29\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Header_wrap__2sLPS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"AllDegreePerHour_wrap__1UrfI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"singleDegree\":\"SingleDegree_singleDegree__1jm7g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"DegreePerDay_wrap__2ftKX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"AllDegreePerWeek_wrap__2i6hv\"};","import React from \"react\";\r\nimport s from \"./Header.module.scss\"\r\n\r\ntype HeaderPropsType = {\r\n    name: string\r\n    description: Array<string>\r\n    temp: number\r\n    icon: string\r\n}\r\n\r\nexport function Header(props: HeaderPropsType) {\r\n    return (\r\n        <div className={s.wrap}>\r\n            <div>{props.name}</div>\r\n            <div>{props.description}</div>\r\n            <div>{props.temp}</div>\r\n            <img src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} alt=\"\"/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {StateType} from \"../../BLL/Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Paper} from \"@material-ui/core\";\r\n\r\ntype MSTP = {\r\n    name: string\r\n    description: string\r\n    temp: number\r\n    icon: string\r\n}\r\n\r\ntype HeaderContainerPropsType = MSTP\r\n\r\nclass HeaderContainer extends React.Component<any> {\r\n    render() {\r\n        return (\r\n            <Paper style={{margin: \"5px\"}}>\r\n                <Header\r\n                    name={this.props.name}\r\n                    description={this.props.description}\r\n                    temp={this.props.temp}\r\n                    icon={this.props.icon}\r\n                />\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    name: state.weather.timezone,\r\n    description: state.weather.current.weather.map(el => el.description),\r\n    temp: state.weather.current.temp,\r\n    icon: state.weather.current.weather.map(el => el.icon)\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(HeaderContainer)","import axios from \"axios\";\r\n\r\nexport const  userAPI = {\r\n    getCurrentWeather()  {\r\n        return axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=33.441792&lon=-94.037689&appid=15a0c1a2d2be9b2201f410148fdec32f&units=metric&lang=ru`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getTime(time:number){\r\n        return axios.get(`https://showcase.api.linx.twenty57.net/UnixTime/fromunix?timestamp=${time}`)\r\n            .then(response=>{\r\n                let time= response.data\r\n                return time\r\n            })\r\n    }\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../../DAL/API/api\";\r\nimport {StateType} from \"./redux-store\";\r\n\r\ntype AppActionType = GetDataType | TransformDataAT\r\n\r\nconst initialStateAll: WeatherTypeAll = {\r\n    \"lat\": 0,\r\n    \"lon\": 0,\r\n    \"timezone\": \"\",\r\n    \"timezone_offset\": 0,\r\n    \"current\": {\r\n        \"dt\": 0,\r\n        \"sunrise\": 0,\r\n        \"sunset\": 0,\r\n        \"temp\": 0,\r\n        \"feels_like\": 0,\r\n        \"pressure\": 0,\r\n        \"humidity\": 0,\r\n        \"dew_point\": 0,\r\n        \"uvi\": 0,\r\n        \"clouds\": 0,\r\n        \"visibility\": 0,\r\n        \"wind_speed\": 0,\r\n        \"wind_deg\": 0,\r\n        \"weather\": []\r\n    },\r\n    \"minutely\": [],\r\n    \"hourly\": [],\r\n    \"daily\": []\r\n}\r\nexport type WeatherTypeAll = {\r\n    \"lat\": number\r\n    \"lon\": number\r\n    \"timezone\": string\r\n    \"timezone_offset\": number\r\n    \"current\": Weather_currentType\r\n    \"minutely\": Weather_Minutely_ObjectType[]\r\n    \"hourly\": Weather_Hourly_ObjectType[]\r\n    \"daily\": Weather_Daily_ObjectType[]\r\n}\r\ntype Weather_currentType = {\r\n    \"dt\": number\r\n    \"sunrise\": number\r\n    \"sunset\": number\r\n    \"temp\": number\r\n    \"feels_like\": number\r\n    \"pressure\": number\r\n    \"humidity\": number\r\n    \"dew_point\": number\r\n    \"uvi\": number\r\n    \"clouds\": number\r\n    \"visibility\": number\r\n    \"wind_speed\": number\r\n    \"wind_deg\": number\r\n    \"weather\": Weather_Current_Weather_ObjectType[]\r\n}\r\ntype Weather_Current_Weather_ObjectType = {\r\n    \"id\": number\r\n    \"main\": string\r\n    \"description\": string\r\n    \"icon\": string\r\n}\r\n\r\ntype Weather_Minutely_ObjectType = {\r\n    \"dt\": number,\r\n    \"precipitation\": number\r\n}\r\n\r\nexport type Weather_Hourly_ObjectType = {\r\n    \"dt\": number\r\n    \"temp\": number\r\n    \"feels_like\": number\r\n    \"pressure\": number\r\n    \"humidity\": number\r\n    \"dew_point\": number\r\n    \"clouds\": number\r\n    \"visibility\": number\r\n    \"wind_speed\": number\r\n    \"wind_deg\": number\r\n    \"pop\": number\r\n    \"weather\": Weather_Hourly_Object_Weather_ObjectType[]\r\n}\r\ntype Weather_Hourly_Object_Weather_ObjectType = {\r\n    \"id\": number\r\n    \"main\": string\r\n    \"description\": string\r\n    \"icon\": string\r\n}\r\n\r\nexport type Weather_Daily_ObjectType = {\r\n    \"dt\": number\r\n    \"sunrise\": number\r\n    \"sunset\": number\r\n    \"pressure\": number\r\n    \"humidity\": number\r\n    \"dew_point\": number\r\n    \"wind_speed\": number\r\n    \"wind_deg\": number\r\n    \"clouds\": number\r\n    \"pop\": number\r\n    \"rain\": number\r\n    \"uvi\": number\r\n    \"feels_like\": Weather_Daily_Object_FeelsLikeType\r\n    \"temp\": Weather_Daily_Object_TempType\r\n    \"weather\": Weather_Daily_Object_Weather_ObjectType[]\r\n}\r\ntype Weather_Daily_Object_FeelsLikeType = {\r\n    \"day\": number\r\n    \"night\": number\r\n    \"eve\": number\r\n    \"morn\": number\r\n}\r\ntype Weather_Daily_Object_TempType = {\r\n    \"day\": number\r\n    \"min\": number\r\n    \"max\": number\r\n    \"night\": number\r\n    \"eve\": number\r\n    \"morn\": number\r\n}\r\ntype Weather_Daily_Object_Weather_ObjectType = {\r\n    \"id\": number\r\n    \"main\": string\r\n    \"description\": string\r\n    \"icon\": string\r\n}\r\n\r\n\r\nexport const WeatherReducer = (state: WeatherTypeAll = initialStateAll, action: AppActionType) => {\r\n    switch (action.type) {\r\n        case \"GET_DATA\": {\r\n            return {\r\n                ...state,\r\n                //current: {...state.current, weather: state.current.weather.map(w => w.id === action.id ? {...w, main: '123'} : w)}\r\n                lat: action.payload.lat,\r\n                lon: action.payload.lon,\r\n                timezone: action.payload.timezone,\r\n                timezone_offset: action.payload.timezone_offset,\r\n                current: {...action.payload.current},\r\n                minutely: action.payload.minutely,\r\n                hourly: action.payload.hourly,\r\n                daily: action.payload.daily\r\n            }\r\n        }\r\n        case \"TRANSFORM_DATA\":{\r\n            return {\r\n                ...state,\r\n                current:{...state.current }\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//--------------------------------------GET-DATA-AC-------------------------------\r\nconst GET_DATA = \"GET_DATA\"\r\nexport type GetDataType = {\r\n    type: typeof GET_DATA\r\n    payload: WeatherTypeAll\r\n}\r\nexport const GetDataAC = (payload: WeatherTypeAll): GetDataType => ({\r\n    type: GET_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------TRANSFORM-DATA-AC-------------------------------\r\nconst TRANSFORM_DATA = \"TRANSFORM_DATA\"\r\nexport type TransformDataAT = {\r\n    type: typeof TRANSFORM_DATA\r\n    payload: WeatherTypeAll\r\n}\r\nexport const transformDataAC = (payload: WeatherTypeAll): TransformDataAT => ({\r\n    type: TRANSFORM_DATA,\r\n    payload: payload\r\n})\r\n//--------------------------------------GET-DATA-TC-------------------------------\r\nexport const GetDataTC = () => async (dispatch: Dispatch) => {\r\n    let response = await userAPI.getCurrentWeather()\r\n    dispatch(GetDataAC(response))\r\n\r\n}","import {GetDataTC} from \"./WeatherReducer\";\r\nimport {StateType} from \"./redux-store\";\r\n\r\ntype AppActionType = SetInitializedType\r\n\r\ntype initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    initialized: false\r\n}\r\n\r\nexport const AppReducer = (state: initialStateType = initialState, action: AppActionType) => {\r\n    switch (action.type) {\r\n        case \"SET_INITIALIZED\": {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//--------------------------------------SET-INITIALIZED-AC-------------------------------\r\nconst SET_INITIALIZED = \"SET_INITIALIZED\"\r\nexport type SetInitializedType = {\r\n    type: typeof SET_INITIALIZED\r\n}\r\nexport const SetInitializedAC = (): SetInitializedType => ({\r\n    type: SET_INITIALIZED\r\n})\r\n//--------------------------------------SET-INITIALIZED-TC-------------------------------\r\nexport const SetInitializedTC = () =>(dispatch: any) => {\r\n    dispatch(GetDataTC())\r\n    dispatch(SetInitializedAC())\r\n}","import React from \"react\";\r\nimport s from \"./AdditionalInformation.module.scss\"\r\nimport {Paper} from \"@material-ui/core\";\r\n\r\ntype AdditionalInformationPropsType={\r\n    speed: number\r\n    pressure: number\r\n    feels_like: number\r\n    humidity: number\r\n    sunrise:number\r\n    sunset:number\r\n}\r\n\r\nexport function AdditionalInformation(props:AdditionalInformationPropsType) {\r\n\r\n    return (\r\n        <div className={s.wrap}>\r\n            <Paper className={s.blockWrap}>\r\n                <div className={s.singleBlock}>\r\n                    <span>sunrise</span>\r\n                    <div>{props.sunrise}</div>\r\n                </div>\r\n                <div className={s.singleBlock}>\r\n                    <span>wind</span>\r\n                    <div>{props.speed} м/c</div>\r\n                </div>\r\n                <div className={s.singleBlock}>\r\n                    <span>pressure</span>\r\n                    <div>{props.pressure}</div>\r\n                </div>\r\n            </Paper>\r\n\r\n            <Paper className={s.blockWrap}>\r\n                <div className={s.singleBlock}>\r\n                    <span>sunset</span>\r\n                    <div>{props.sunset}</div>\r\n                </div>\r\n                <div className={s.singleBlock}>\r\n                    <span>feels like</span>\r\n                    <div>{props.feels_like}</div>\r\n                </div>\r\n                <div className={s.singleBlock}>\r\n                    <span>humidity</span>\r\n                    <div>{props.humidity}% </div>\r\n                </div>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {AdditionalInformation} from \"./AdditionalInformation\";\r\nimport {StateType} from \"../../BLL/Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Paper} from \"@material-ui/core\";\r\n\r\ntype MSTP = {\r\n    speed: number\r\n    pressure: number\r\n    feels_like: number\r\n    humidity: number\r\n    sunrise: number\r\n    sunset: number\r\n}\r\n\r\ntype AdditionalInformationContainerPropsType = MSTP\r\n\r\nclass AdditionalInformationContainer extends React.Component<AdditionalInformationContainerPropsType> {\r\n    render() {\r\n        return <AdditionalInformation\r\n            feels_like={this.props.feels_like}\r\n            humidity={this.props.humidity}\r\n            pressure={this.props.pressure}\r\n            speed={this.props.speed}\r\n            sunrise={this.props.sunrise}\r\n            sunset={this.props.sunset}\r\n        />\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    speed: state.weather.current.wind_speed,\r\n    pressure: state.weather.current.pressure,\r\n    feels_like: state.weather.current.feels_like,\r\n    humidity: state.weather.current.humidity,\r\n    sunrise: state.weather.current.sunrise,\r\n    sunset: state.weather.current.sunset\r\n})\r\nexport default connect(mapStateToProps, {})(AdditionalInformationContainer)","import React from \"react\";\r\nimport s from \"./SingleDegree.module.scss\"\r\nimport {Weather_Hourly_ObjectType} from \"../../../BLL/Redux/WeatherReducer\";\r\n\r\ntype SingleDegreePropsType = {\r\n    hourly: Weather_Hourly_ObjectType\r\n}\r\n\r\nexport function SingleDegree(props:SingleDegreePropsType) {\r\n    return (\r\n        <span className={s.singleDegree}>\r\n            <div>{props.hourly.dt}</div>\r\n            <img src={`http://openweathermap.org/img/wn/${props.hourly.weather[0].icon}.png`} alt=\"\"/>\r\n            <div>{props.hourly.temp}</div>\r\n        </span>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./AllDegreePerHour.module.scss\"\r\nimport {Weather_Hourly_ObjectType} from \"../../BLL/Redux/WeatherReducer\";\r\nimport {SingleDegree} from \"./SingleDegree/SingleDegree\";\r\nimport {Paper} from \"@material-ui/core\";\r\n\r\ntype AllDegreePerHourPropsType = {\r\n    hourly: Weather_Hourly_ObjectType[]\r\n}\r\n\r\nexport function AllDegreePerHour(props: AllDegreePerHourPropsType) {\r\n    return (\r\n        <div className={s.wrap}>\r\n            {props.hourly.map((el) => <Paper style={{margin: \"5px\"}}><SingleDegree hourly={el}/> </Paper>)}\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {AllDegreePerHour} from \"./AllDegreePerHour\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../BLL/Redux/redux-store\";\r\nimport {Weather_Hourly_ObjectType} from \"../../BLL/Redux/WeatherReducer\";\r\n\r\ntype MSTP = {\r\n    hourly: Weather_Hourly_ObjectType[]\r\n}\r\n\r\ntype AllDegreePerHourContainerPropsType = MSTP\r\n\r\nclass AllDegreePerHourContainer extends React.Component<AllDegreePerHourContainerPropsType> {\r\n    render() {\r\n        return <AllDegreePerHour hourly={this.props.hourly}/>\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    hourly: state.weather.hourly\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(AllDegreePerHourContainer)","import React from \"react\";\r\nimport s from \"./DegreePerDay.module.scss\"\r\nimport {Weather_Daily_ObjectType} from \"../../../BLL/Redux/WeatherReducer\";\r\n\r\ntype DegreePerDayPropsType={\r\n    daily:Weather_Daily_ObjectType\r\n}\r\n\r\nexport function DegreePerDay(props:DegreePerDayPropsType) {\r\n    return (\r\n        <div className={s.wrap}>\r\n            <div>{props.daily.dt}</div>\r\n            <img src={`http://openweathermap.org/img/wn/${props.daily.weather.map(el=>el.icon)}.png`} alt=\"\"/>\r\n            <div>{props.daily.temp.day}</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {DegreePerDay} from \"./DegreePerDay/DegreePerDay\";\r\nimport s from \"./AllDegreePerWeek.module.scss\"\r\nimport {Weather_Daily_ObjectType} from \"../../BLL/Redux/WeatherReducer\";\r\nimport {Paper} from \"@material-ui/core\";\r\n\r\ntype AllDegreePerWeekPropsType = {\r\n    daily: Weather_Daily_ObjectType[]\r\n}\r\n\r\nexport function AllDegreePerWeek(props: AllDegreePerWeekPropsType) {\r\n    return (\r\n        <div className={s.wrap}>\r\n            {props.daily.map(el => <Paper style={{margin:\"5px\"}}><DegreePerDay daily={el}/></Paper>)}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {AllDegreePerWeek} from \"./AllDegreePerWeek\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../BLL/Redux/redux-store\";\r\nimport {Weather_Daily_ObjectType} from \"../../BLL/Redux/WeatherReducer\";\r\n\r\ntype MSTP = {\r\n    daily:Weather_Daily_ObjectType[]\r\n}\r\n\r\ntype AllDegreePerWeekContainerPropsType = MSTP\r\n\r\nclass AllDegreePerWeekContainer extends React.Component<AllDegreePerWeekContainerPropsType> {\r\n    render() {\r\n        return <AllDegreePerWeek daily={this.props.daily}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => ({\r\n    daily: state.weather.daily\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(AllDegreePerWeekContainer)","import React from 'react';\nimport s from './App.module.scss';\nimport HeaderContainer from \"./UI/Header/HeaderContainer\";\nimport {StateType} from \"./BLL/Redux/redux-store\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {SetInitializedTC} from \"./BLL/Redux/AppReducer\";\nimport AdditionalInformationContainer from \"./UI/AdditionalInformation/AdditionalInformationContainer\";\nimport AllDegreePerHourContainer from \"./UI/AllDegreePerHour/AllDegreePerHourContainer\";\nimport AllDegreePerWeekContainer from \"./UI/AllDegreePerWeek/AllDegreePerWeekContainer\";\n\ntype MSTP = {\n    initialized: boolean\n}\n\ntype MDTP = {\n    SetInitializedTC: () => void\n}\n\ntype AppPropsType = MDTP & MSTP\n\nclass App extends React.Component<AppPropsType> {\n    componentDidMount() {\n        this.props.SetInitializedTC()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return \"Loading\"\n        }\n\n        return (\n            <div className={s.app}>\n                <HeaderContainer/>\n                <AllDegreePerHourContainer/>\n                <AllDegreePerWeekContainer/>\n                <AdditionalInformationContainer/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: StateType) => ({\n    initialized: state.app.initialized\n})\n\nexport default compose(\n    connect(mapStateToProps, {SetInitializedTC})\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppWithReducers is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {AppReducer} from \"./AppReducer\";\r\nimport {WeatherReducer} from \"./WeatherReducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\nlet reducers=combineReducers({\r\n    app:AppReducer,\r\n    weather:WeatherReducer\r\n})\r\n\r\nexport const store=createStore(reducers, applyMiddleware(thunkMiddleware))\r\nexport type StateType=ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store=store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport {store} from \"./BLL/Redux/redux-store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}